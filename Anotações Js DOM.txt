Para referenciar o seu DOM em js deve colocar o seguinte código:
    <script src="./caminho do documento js" defer></script>


Para puxar alguma tag dentro do js pode usar os comandos:

    querySelector:
        Só seleciona o primeiro elemeto retratado;
             "use strict";
             const h1 = document.querySelector("h1"); // tag html
 
             const p = document.querySelector('p'); // Só o primeiro <p> do html
 
             console.log(h1);
             console.log(p);
        
        Para pegar alguma classe ou id se utiliza:
             const classP = document.querySelector('.paragrafo'); // chama a class retratada
              ou
             const idP = document.querySelector('#paragrafo') // chama o id retratado
 
             console.log(classP);
             console.log(idP);

        Podemos chamar tags filhos usando os seguites comandos:
             const classP = document.querySelector('pai filho');
               ou 
             const pai = document.querySelector('pai');
             const filho = pai.querySelector('filho');


    querySelectorAll:
        Selecioa todas as tags chamadas e colcoca elas em uma NodeList seguindo a ordem em que estão colocadas no caso só seu index:
             const p = document.querySelectorAll('p');
             console.log(p)
            Seleciona todos o paragrafos mas não colcoa em um array, sim retorna cada elemento separado:
        
        Exemplo para uso:
             p.forEach((element,index) => {
                 element.style.color= "#FFF";
                 element.style.padding = '20px'
                 if (index === 0){
                     element.style.background = 'blue';
                 };
                 if(index === 1){
                     element.style.background = 'red';
                 };
             });
            Então para cada elemento que foi atingido na linha de cima eu posso fazer algo com ele.


    getElementById:
        Ele pega o elemento pelo seu id identificando o primeiro elemento mesmo se tiver mais de 1:
             const p = document.getElementById('paragrafo')
             console.log(p)
    

    getElementBuClass:
        Ele pega todos os elementos que pertrncem a classe selecionada:
             const p = document.getElementsByClassName('paragrafo')
     
             console.log(p);
     
             for (let element of p){
                console.log(element);
             } // Para dar print em cada elemento separado precisa ser assim forEach não funciona
    

    getElementsByTagName:
        É bem limitado pois só pega a tag de elementos nada a mais:
             const p = document.getElementsByTagName('p');
             console.log(p)
 
             for (let element of p){
                 console.log(element)
             } 



Manipulando dados:

    textContent e innerText:
        Ambos servem para buscar o conteúdo interno de uma tag, porém innerText é um pouco diferente;
         O innerText vai mostrar todo o texto entre as tags mas sem a formatação;
         O textContent vai mostrar todo o texto junto da formatação;
        
        Exemplos:
            1 - Mostra os textos dentro da tag p:
                 const p = document.querySelector('p');
 
                 console.log(p.textContent);
                 console.log(p.innerText);
            
            2 - Troca o texto dentro da tag p:
                 const p = document.querySelector('p');

                 p.textContent = 'Hello World!';
                 p.innerText = 'Word Hello';

    innerHTML e createElement:
         innerHTML - Serve para trocar ou adicionar coisas junto de tags HTML na nossa página;

            Exemplo:
                1 - Está trocando todo o conteúdo da div para "Esse é meu texto alterado" junto da tag "strong",
                     const div = document.querySelector('div');
                     console.log(1, div);
    
                     div.innerHTML = '<strong>Esse é meu texto alterado</strong>';
                     console.log(2, div);

               2 - Está adicionando "Esse é meu texto alterado" da div
                     const div = document.querySelector('div');
                     console.log(1, div);
    
                     div.innerHTML += '<strong>Esse é meu texto alterado</strong>';
                        ou
                     div.innerHTML = `${div.innerHTML}<strong>Esse é meu texto alterado</strong>`
                     console.log(2, div); 
        
         createElement - Serve para criar elementos dinamicamente no nosso HTML e posteriormente colcocar informações dentro desse elemento;

            Exemplo:
                1 - Ele está criando uma tag 'ul' e colocando dentro de uma div;
                     const elemetUL = document.createElement('ul');
                     div.appendChild(elemetUL);
                     console.log(elemetUL);

                2 - Ele está criando o a tag "ul" depois em um forEach está adicionando "li" dentro desse "ul" e adicionando o conteúdo da array na "li" depois adicionando a ul à nossa div;
                     const elemetUL = document.createElement('ul');

                     [1,2,3].forEach((element) => {
                         const elementLI = document.createElement('li')
                         elementLI.innerText = element
                         elemetUL.appendChild(elementLI);
                     })

                     div.appendChild(elemetUL);
                     console.log(elemetUL);

    Input Value:
        Para pegar dados de formularios usamos o .value
            Exemplo:
                1 - Estamos pegando o valor do input com id="name", e mostrando esse valor com o value
                 const input = document.querySelector('#name');
 
                 console.log(input.value);
                
                2 - Estamos pegando o valor do in´put com o id='name', e depois de 1 segundo(1000 milesegundos) estamos trocando o valor para abacate e imprimindo ele;
                     const input = document.querySelector('#name');
 
                     console.log(input.value);

                     setTimeout(() => {
                         input.value = 'Abacate';
                         console.log(input.value);
                     }, 1000);
        
    Atribtos:
        setAttribute - serve para trocar ou adicionar um atibuto no html, se tiver outro atibuto do mesmo tipo como uma class ele vai substituir a class;

            Exemplo:
                1 - Ele está adicionar o id na div;
                     const div = document.querySelector('div');
                     div.setAttribute('id', 'teste')
                
                2 - Para adicionar uma class e manter a que já estava utilizamos o getAttribute;
                     div.setAttribute('class', `${div.getAttribute('class')} active`)
                    
        getAttribute - serve para pegar o atributos existentes;

            Exemplo:
                1 - Erro tem que chamar pelo menos um atributo;
                     console.log(div.getAttribute()) // erro;
                
                2 - Está apenas chamando o atibuto class;
                     console.log(div.getAttribute('class'))
        
        removeAttribute - serve para remover algum atributos existe;
            Exemplo:
                1 - Erro tem que ser referenciado pelo menos um atributo;
                     div.removeAttribute() // erro
                
                2 - Está removendo id;
                     div.removeAttribute('id')
    

    crateDocumnetFragment - é usada quando queremos criar algo sem ele estar direto em alguma posição da nossa página; isso economisa a memoria de precessamento do código:
        Básicamente tu vai criar um fragmento que vcai conter o que você deseja inserir no html mas só vai se inserido quando todos as coisas para serem adicioadas já tiverm sido renderizadas;
        
        Exemplo:
            1 - Ele tá pegando a "ul" do html, criando um "fragamento" e uma array "laches" com isso lanches entra em uma "forEach" que cria "li" e adiciona no "fragamento" e depois de ter criado todas as "li" e adicionado ele adiciona no documento principal no caso a "ul"
                 const ul = document.querySelector('ul');
                 const fragment = document.createDocumentFragment();
    
                 const lanches = ["Lanche 1", "Lanche 2", "Lanche 3", "Lanche 4"];
    
                 lanches.forEach(elemenet =>{
                     const li = document.createElement('li');
                     li.textContent = elemenet
                     fragment.append(li)
                 })
    
                 console.log(fragment);
                 ul.append(fragment);
    
    Removendo um Elemento:
        Para remover algum elemento usando o js se usa o '.remove';
            Exemplo:
                1 - Com indece:
                     li[2].remove()

                2 - Elemento avulso:
                     h1.remove()



Manipulando Style:
    Mudar o style usando js:
        basta colocar a propriedade "style" de pois do elemento que deseja mudar:
            
            Exemplo:
                1 - Ele está mudando a 'font-family' e o 'color' no js assim como no css
                     const h1 = document.querySelector('h1');

                     // font-family: 'Arial'
                     h1.style.fontFamily = 'Arial';
                     h1.style.color = 'red'; 
                
                2 - Ele está mudando todas as tags "p" seu 'font-family' e seu 'font-size' assim como no css
                     const p = document.querySelectorAll('p');
                     p.forEach((element) => {
                         element.style.fontFamily = 'Arial';
                         element.style.fontSize = '12px'
                     })
    
        Ele não substitui a regra css, mas sim adiciona mais uma camada de estilo em cima dela; Só substituindo se for a mesma propriedade do css;
    
    classList:
        Ele lista as classes da tag , é possivel adicionar ou remover uma classe com esse metodo.

            Adcionar:
                Para adiconar uma class em uma tag basta colocar:
                    váriavel.classList.add('nomeDaClasse')
                
                Exemplo:
                     const h1 = document.querySelector('h1');
 
                     h1.classList.add('active', 'teste1'); // Pode se adicionar mais de uma classe por vez
                     h1.classList.add('teste2');
            
            Remover:
                Para  remover uma class em uma tag basta usar a função remove, passando a mesma class que você quer remover:
                    váriavel.classList.remove('nomeDaClasse');
                
                Exemplo:
                     const h1 = document.querySelector('h1');
                     h1.classList.remove('teste2');
                
            Verificar se tem uma classe e remover se tiver ou vice versa: 
                Para verificar se usa ".toggle" e se a class não estiver na tag ele vai adicionar, se ela estiver ele vai tirar.
                    váriavel.classList.toggle('nomeDaClasse');
                
                Exemplo:
                     const h1 = document.querySelector('h1');
                     h1.classList.toggle('teste2');
                
            Verifica se tem uma determina classe:
                para verificar se tem a classe na tag utilizamos '.contains'. Que retorna um boolean true ou false;
                    váriavel.classList.contains('nomeDaClasse'); 
                
                Exemplo:
                    1 - Ele está validando que te  a class active, retornaria true;
                        h1.classList.contains('active') // true

                    2 -Ele está validando que tem a class active e mandando um alert;
                         if (h1.classList.contains('active')) {
                             alert('Existe a classe active')
                         }
    
    className:
        Ele retorna todos as clases da tag:
            váriavel.className // "classe1 classe2"
        
        Exemplo:
             const h1 = document.querySelector('h1')
 
             console.log(h1.className) // 'active teste1 teste2'



Encontrando Elementos:
    Pai:
        Podemos encontar usando dois comandos: parentElement e parentNode. Aboms são similares mas o parentElement é mais recomendado pois ele busca apenas a tag;

            Exemplo:
                1 - Ele busca o pai do elemento e o imprime:
                     const strong = document.querySelector('strong');
                     console.log(strong.parentElement); // p.paragrafo
                     console.log(strong.parentNode); // p.paragrafo
                
                2 - Ele busca o pai do elemento e o imprime:
                     const p = document.querySelector('.paragrafo');
                     console.log(p.parentElement); // div.container
                     console.log(p.parentNode); // div.container

                3 - Ele busca o pai do elemento e o imprime:
                     const container = document.querySelector('.container');
                     console.log(container.parentElement); // body
                     console.log(container.parentNode); // body
                
                4 - Ele busca o pai do elemento e o imprime:
                     const body = document.querySelector('body');
                     console.log(body.parentElement); // html
                     console.log(body.parentNode); // html
    
    Filhos: 
        Podemos acessar os filhos de um elemento usando as funções: children, childNodes, firstChild, firstElementChild, lastChild e lastElementChild:

            children:
                Ele tem um grande problema posi retorna as tags filhos em ordem, com o 'HTML COLLECTION' e isso faz com que a lista que gera não seja interavel;

                    Exemplo:
                         const container = document.querySelector('.container')
                         console.log(container.children) // HTML COLLECTION

            childNodes:
                Ele tambem retorna todos os nós filhos, inclusive textos e comentários. Então no caso se tiver espaçamento vai retornar com um 'Text' indesejavel, porem, tem como reverter isto;

                Exemplos:
                    1 - Todos os nós, inclusive textos (comentários, espaços em branco), são considerados como childNodes:
                         const container = document.querySelector('.container')
                         console.log(container.childNodes) // NodeList
                    
                    2 - Para reverter isso utilizamos uma gambiarra:
                         const children = Array.from(container.childNodes); // Ele transforma nosoo fake array em uma array de verdade
 
                         console.log(children);
 
                         children.forEach((res) => {
                             console.log(res)
                         })
                
            firstChild:
                Ele vai o primeiro filho da tag seleciona; Não o elemento;
                    
                    Exemplo:
                        1 - Ele retorna um '#text" pois está identado;
                             const container = document.querySelector('.container');
                             console.log(container.firstChild); // #text
                    
                        2 - Mesma coisa pelo mesmo motivo;
                            const p = document.querySelector('.paragrafo');
                            console.log(p.firstChild); // #text
            
            firstElementChild:
                Ele realmente retorna o primeiro elemento filho;

                    Exemplo:
                        1 - Ele está retornado h1 pois esse é realmente o primeiro elemento;
                             const container = document.querySelector('.container');
                             console.log(container.firstElementChild); // h1
                    
                        2 - Ele está retornado strong pois ele é o primeiro elemento;
                             const p = document.querySelector('.paragrafo');
                             console.log(p.firstElementChild) // strong
            
            lastChild:
                Tem o mesmo problema do 'firstChild';
                     const container = document.querySelector('.container')
                     console.log(container.lastChild) // #text
            
            lastElementChild:
                Retorna o último elemento filho;
                     const container = document.querySelector('.container')
                     console.log(container.lastElementChild) // p#paragrafo
    
    Irmãos:
        São elementão que estão compartilhando o mesmo elemeneto pai.

        nextSibling:
            Ele tem o mesmo problema do 'firstChild' e 'lastChild', mas serve para os próximos irmãos.

                Exemplo:
                     const h1 = document.querySelector('h1');
                     console.log(h1.nextSibling) // #text (O espaço em branco entre a tag de fechamento da h1)
        
        nextElementSibling: 
            Mesma  coisa que 'nextSibling', porém somente retorna elementos, não textos ou outros tipos de nós.
                
                Exemplo:
                     const h1 = document.querySelector('h1');
                     console.log(h1.nextElementSibling) // p.paragrafo
        
        previusSibling:
            Serve para ver o irmão que está antes dele e tem mesmo problema que 'firstChild' e 'lastChild' retorna um "text":

                Exemplo:
                    const p = document.querySelector('.paragrafo')
                    console.log(p.previousSibling) // #text
    
        previusElementSibling:
            Mesma coisa que o previousSibling mas ele retorna o irmão em formato de Elemento, ou seja, um element
                
                Exemplo:
                     const p = document.querySelector('.paragrafo')
                     console.log(p.previousElementSibling) //retorna o elemento anterior, se não tiver retorna null
    


Adicionanado Elementos:
    append:
        serve para apenas colocar um texto avulso sem tags:

            Exemplo:
                 const container = document.querySelector('.container');

                 container.append('Ola, mundo!') // Ola, mundo!
                 container.append('<p>Ola, mundo!</p>') // <p>Ola, mundo!</p>
                
                Isso que ira apracer no html;
    
    appendChild:
        Serve para adicionar tags no html e nessas tags pode se ter textos ou outras coisas;
            Exemplo:
                 const container = document.querySelector('.container');
                 const newDiv = document.createElement('div')
                 newDiv.innerText = 'Ola, mundo!'
                 container.appendChild(newDiv)
                Para fazer com que o appendChild devemos iniciar uma nova váriavel contendo o "document.createElement()" e nesse no elemeneto adicionamos o texto e colocamos o elemeto com o texto dentro do "appendChild()"

    insertBefore:
        É adicionar um lemento antes de outro:

            Exemplo:
                 const container = document.querySelector('.container');
                 const paragrafo = container.querySelector('.paragrafo')
                 const newH2  = document.createElement('h2');
                 newH2.innerText = 'Novo H2';
 
                 container.insertBefore(newH2, paragrafo)
                Estamos criando um novo elemento h2 e inserindo ele antes do elemento com a class "paragrafo";
    
    before e after:
        befor = adiciona um elemeneto/text antes do elemento escolhido:
            váriavel.before(novoElemento);
        
        after = adiciona um elemeneto/text depois do elemento escolhido:
            váriavel.after(novoElemento);
        
        Exemplo:
            1 - Ele está adicionando os Text antes e depois do container
                 const container = document.querySelector('.container');
 
                 container.after('Ola mundo') // Ola mundo
                 container.after('<p>Ola mundo</p>') // <p>Ola mundo</p> 
 
                 container.before('Ola mundo') // Ola mundo
                 container.before('<p>Ola mundo</p>') // <p>Ola mundo</p> 
            
            2 - Ele adiocana mas agora como paragrafo:
                const container = document.querySelector('.container');
 
                const newP = document.createElement('p');
                const newP2 = document.createElement('p');
                newP.innerText = 'Ola mundo'

                container.after(newP)
                container.before(newP2)
