Para referenciar o seu DOM em js deve colocar o seguinte código:
    <script src="./caminho do documento js" defer></script>


Para puxar alguma tag dentro do js pode usar os comandos:

    querySelector:
        Só seleciona o primeiro elemeto retratado;
             "use strict";
             const h1 = document.querySelector("h1"); // tag html
 
             const p = document.querySelector('p'); // Só o primeiro <p> do html
 
             console.log(h1);
             console.log(p);
        
        Para pegar alguma classe ou id se utiliza:
             const classP = document.querySelector('.paragrafo'); // chama a class retratada
              ou
             const idP = document.querySelector('#paragrafo') // chama o id retratado
 
             console.log(classP);
             console.log(idP);

        Podemos chamar tags filhos usando os seguites comandos:
             const classP = document.querySelector('pai filho');
               ou 
             const pai = document.querySelector('pai');
             const filho = pai.querySelector('filho');


    querySelectorAll:
        Selecioa todas as tags chamadas e colcoca elas em uma NodeList seguindo a ordem em que estão colocadas no caso só seu index:
             const p = document.querySelectorAll('p');
             console.log(p)
            Seleciona todos o paragrafos mas não colcoa em um array, sim retorna cada elemento separado:
        
        Exemplo para uso:
             p.forEach((element,index) => {
                 element.style.color= "#FFF";
                 element.style.padding = '20px'
                 if (index === 0){
                     element.style.background = 'blue';
                 };
                 if(index === 1){
                     element.style.background = 'red';
                 };
             });
            Então para cada elemento que foi atingido na linha de cima eu posso fazer algo com ele.


    getElementById:
        Ele pega o elemento pelo seu id identificando o primeiro elemento mesmo se tiver mais de 1:
             const p = document.getElementById('paragrafo')
             console.log(p)
    

    getElementBuClass:
        Ele pega todos os elementos que pertrncem a classe selecionada:
             const p = document.getElementsByClassName('paragrafo')
     
             console.log(p);
     
             for (let element of p){
                console.log(element);
             } // Para dar print em cada elemento separado precisa ser assim forEach não funciona
    

    getElementsByTagName:
        É bem limitado pois só pega a tag de elementos nada a mais:
             const p = document.getElementsByTagName('p');
             console.log(p)
 
             for (let element of p){
                 console.log(element)
             } 



Manipulando dados:

    textContent e innerText:
        Ambos servem para buscar o conteúdo interno de uma tag, porém innerText é um pouco diferente;
         O innerText vai mostrar todo o texto entre as tags mas sem a formatação;
         O textContent vai mostrar todo o texto junto da formatação;
        
        Exemplos:
            1 - Mostra os textos dentro da tag p:
                 const p = document.querySelector('p');
 
                 console.log(p.textContent);
                 console.log(p.innerText);
            
            2 - Troca o texto dentro da tag p:
                 const p = document.querySelector('p');

                 p.textContent = 'Hello World!';
                 p.innerText = 'Word Hello';

    innerHTML e createElement:
         innerHTML - Serve para trocar ou adicionar coisas junto de tags HTML na nossa página;

            Exemplo:
                1 - Está trocando todo o conteúdo da div para "Esse é meu texto alterado" junto da tag "strong",
                     const div = document.querySelector('div');
                     console.log(1, div);
    
                     div.innerHTML = '<strong>Esse é meu texto alterado</strong>';
                     console.log(2, div);

               2 - Está adicionando "Esse é meu texto alterado" da div
                     const div = document.querySelector('div');
                     console.log(1, div);
    
                     div.innerHTML += '<strong>Esse é meu texto alterado</strong>';
                        ou
                     div.innerHTML = `${div.innerHTML}<strong>Esse é meu texto alterado</strong>`
                     console.log(2, div); 
        
         createElement - Serve para criar elementos dinamicamente no nosso HTML e posteriormente colcocar informações dentro desse elemento;

            Exemplo:
                1 - Ele está criando uma tag 'ul' e colocando dentro de uma div;
                     const elemetUL = document.createElement('ul');
                     div.appendChild(elemetUL);
                     console.log(elemetUL);

                2 - Ele está criando o a tag "ul" depois em um forEach está adicionando "li" dentro desse "ul" e adicionando o conteúdo da array na "li" depois adicionando a ul à nossa div;
                     const elemetUL = document.createElement('ul');

                     [1,2,3].forEach((element) => {
                         const elementLI = document.createElement('li')
                         elementLI.innerText = element
                         elemetUL.appendChild(elementLI);
                     })

                     div.appendChild(elemetUL);
                     console.log(elemetUL);

    Input Value:
        Para pegar dados de formularios usamos o .value
            Exemplo:
                1 - Estamos pegando o valor do input com id="name", e mostrando esse valor com o value
                 const input = document.querySelector('#name');
 
                 console.log(input.value);
                
                2 - Estamos pegando o valor do in´put com o id='name', e depois de 1 segundo(1000 milesegundos) estamos trocando o valor para abacate e imprimindo ele;
                     const input = document.querySelector('#name');
 
                     console.log(input.value);

                     setTimeout(() => {
                         input.value = 'Abacate';
                         console.log(input.value);
                     }, 1000);
        
    Atribtos:
        setAttribute - serve para trocar ou adicionar um atibuto no html, se tiver outro atibuto do mesmo tipo como uma class ele vai substituir a class;

            Exemplo:
                1 - Ele está adicionar o id na div;
                     const div = document.querySelector('div');
                     div.setAttribute('id', 'teste')
                
                2 - Para adicionar uma class e manter a que já estava utilizamos o getAttribute;
                     div.setAttribute('class', `${div.getAttribute('class')} active`)
                    
        getAttribute - serve para pegar o atributos existentes;

            Exemplo:
                1 - Erro tem que chamar pelo menos um atributo;
                     console.log(div.getAttribute()) // erro;
                
                2 - Está apenas chamando o atibuto class;
                     console.log(div.getAttribute('class'))
        
        removeAttribute - serve para remover algum atributos existe;
            Exemplo:
                1 - Erro tem que ser referenciado pelo menos um atributo;
                     div.removeAttribute() // erro
                
                2 - Está removendo id;
                     div.removeAttribute('id')
    

    crateDocumnetFragment - é usada quando queremos criar algo sem ele estar direto em alguma posição da nossa página; isso economisa a memoria de precessamento do código:
        Básicamente tu vai criar um fragmento que vcai conter o que você deseja inserir no html mas só vai se inserido quando todos as coisas para serem adicioadas já tiverm sido renderizadas;
        
        Exemplo:
            1 - Ele tá pegando a "ul" do html, criando um "fragamento" e uma array "laches" com isso lanches entra em uma "forEach" que cria "li" e adiciona no "fragamento" e depois de ter criado todas as "li" e adicionado ele adiciona no documento principal no caso a "ul"
                 const ul = document.querySelector('ul');
                 const fragment = document.createDocumentFragment();
    
                 const lanches = ["Lanche 1", "Lanche 2", "Lanche 3", "Lanche 4"];
    
                 lanches.forEach(elemenet =>{
                     const li = document.createElement('li');
                     li.textContent = elemenet
                     fragment.append(li)
                 })
    
                 console.log(fragment);
                 ul.append(fragment);
    
    Removendo um Elemento:
        Para remover algum elemento usando o js se usa o '.remove';
            Exemplo:
                1 - Com indece:
                     li[2].remove()

                2 - Elemento avulso:
                     h1.remove()



Manipulando Style:
    Mudar o style usando js:
        basta colocar a propriedade "style" de pois do elemento que deseja mudar:
            
            Exemplo:
                1 - Ele está mudando a 'font-family' e o 'color' no js assim como no css
                     const h1 = document.querySelector('h1');

                     // font-family: 'Arial'
                     h1.style.fontFamily = 'Arial';
                     h1.style.color = 'red'; 
                
                2 - Ele está mudando todas as tags "p" seu 'font-family' e seu 'font-size' assim como no css
                     const p = document.querySelectorAll('p');
                     p.forEach((element) => {
                         element.style.fontFamily = 'Arial';
                         element.style.fontSize = '12px'
                     })
    
        Ele não substitui a regra css, mas sim adiciona mais uma camada de estilo em cima dela; Só substituindo se for a mesma propriedade do css;
    
    classList:
        Ele lista as classes da tag , é possivel adicionar ou remover uma classe com esse metodo.

            Adcionar:
                Para adiconar uma class em uma tag basta colocar:
                    váriavel.classList.add('nomeDaClasse')
                
                Exemplo:
                     const h1 = document.querySelector('h1');
 
                     h1.classList.add('active', 'teste1'); // Pode se adicionar mais de uma classe por vez
                     h1.classList.add('teste2');
            
            Remover:
                Para  remover uma class em uma tag basta usar a função remove, passando a mesma class que você quer remover:
                    váriavel.classList.remove('nomeDaClasse');
                
                Exemplo:
                     const h1 = document.querySelector('h1');
                     h1.classList.remove('teste2');
                
            Verificar se tem uma classe e remover se tiver ou vice versa: 
                Para verificar se usa ".toggle" e se a class não estiver na tag ele vai adicionar, se ela estiver ele vai tirar.
                    váriavel.classList.toggle('nomeDaClasse');
                
                Exemplo:
                     const h1 = document.querySelector('h1');
                     h1.classList.toggle('teste2');
                
            Verifica se tem uma determina classe:
                para verificar se tem a classe na tag utilizamos '.contains'. Que retorna um boolean true ou false;
                    váriavel.classList.contains('nomeDaClasse'); 
                
                Exemplo:
                    1 - Ele está validando que te  a class active, retornaria true;
                        h1.classList.contains('active') // true

                    2 -Ele está validando que tem a class active e mandando um alert;
                         if (h1.classList.contains('active')) {
                             alert('Existe a classe active')
                         }
    
    className:
        Ele retorna todos as clases da tag:
            váriavel.className // "classe1 classe2"
        
        Exemplo:
             const h1 = document.querySelector('h1')
 
             console.log(h1.className) // 'active teste1 teste2'



Encontrando Elementos:
    Pai:
        Podemos encontar usando dois comandos: parentElement e parentNode. Aboms são similares mas o parentElement é mais recomendado pois ele busca apenas a tag;

            Exemplo:
                1 - Ele busca o pai do elemento e o imprime:
                     const strong = document.querySelector('strong');
                     console.log(strong.parentElement); // p.paragrafo
                     console.log(strong.parentNode); // p.paragrafo
                
                2 - Ele busca o pai do elemento e o imprime:
                     const p = document.querySelector('.paragrafo');
                     console.log(p.parentElement); // div.container
                     console.log(p.parentNode); // div.container

                3 - Ele busca o pai do elemento e o imprime:
                     const container = document.querySelector('.container');
                     console.log(container.parentElement); // body
                     console.log(container.parentNode); // body
                
                4 - Ele busca o pai do elemento e o imprime:
                     const body = document.querySelector('body');
                     console.log(body.parentElement); // html
                     console.log(body.parentNode); // html
    
    Filhos: 
        Podemos acessar os filhos de um elemento usando as funções: children, childNodes, firstChild, firstElementChild, lastChild e lastElementChild:

            children:
                Ele tem um grande problema posi retorna as tags filhos em ordem, com o 'HTML COLLECTION' e isso faz com que a lista que gera não seja interavel;

                    Exemplo:
                         const container = document.querySelector('.container')
                         console.log(container.children) // HTML COLLECTION

            childNodes:
                Ele tambem retorna todos os nós filhos, inclusive textos e comentários. Então no caso se tiver espaçamento vai retornar com um 'Text' indesejavel, porem, tem como reverter isto;

                Exemplos:
                    1 - Todos os nós, inclusive textos (comentários, espaços em branco), são considerados como childNodes:
                         const container = document.querySelector('.container')
                         console.log(container.childNodes) // NodeList
                    
                    2 - Para reverter isso utilizamos uma gambiarra:
                         const children = Array.from(container.childNodes); // Ele transforma nosoo fake array em uma array de verdade
 
                         console.log(children);
 
                         children.forEach((res) => {
                             console.log(res)
                         })
                
            firstChild:
                Ele vai o primeiro filho da tag seleciona; Não o elemento;
                    
                    Exemplo:
                        1 - Ele retorna um '#text" pois está identado;
                             const container = document.querySelector('.container');
                             console.log(container.firstChild); // #text
                    
                        2 - Mesma coisa pelo mesmo motivo;
                            const p = document.querySelector('.paragrafo');
                            console.log(p.firstChild); // #text
            
            firstElementChild:
                Ele realmente retorna o primeiro elemento filho;

                    Exemplo:
                        1 - Ele está retornado h1 pois esse é realmente o primeiro elemento;
                             const container = document.querySelector('.container');
                             console.log(container.firstElementChild); // h1
                    
                        2 - Ele está retornado strong pois ele é o primeiro elemento;
                             const p = document.querySelector('.paragrafo');
                             console.log(p.firstElementChild) // strong
            
            lastChild:
                Tem o mesmo problema do 'firstChild';
                     const container = document.querySelector('.container')
                     console.log(container.lastChild) // #text
            
            lastElementChild:
                Retorna o último elemento filho;
                     const container = document.querySelector('.container')
                     console.log(container.lastElementChild) // p#paragrafo
    
    Irmãos:
        São elementão que estão compartilhando o mesmo elemeneto pai.

        nextSibling:
            Ele tem o mesmo problema do 'firstChild' e 'lastChild', mas serve para os próximos irmãos.

                Exemplo:
                     const h1 = document.querySelector('h1');
                     console.log(h1.nextSibling) // #text (O espaço em branco entre a tag de fechamento da h1)
        
        nextElementSibling: 
            Mesma  coisa que 'nextSibling', porém somente retorna elementos, não textos ou outros tipos de nós.
                
                Exemplo:
                     const h1 = document.querySelector('h1');
                     console.log(h1.nextElementSibling) // p.paragrafo
        
        previusSibling:
            Serve para ver o irmão que está antes dele e tem mesmo problema que 'firstChild' e 'lastChild' retorna um "text":

                Exemplo:
                    const p = document.querySelector('.paragrafo')
                    console.log(p.previousSibling) // #text
    
        previusElementSibling:
            Mesma coisa que o previousSibling mas ele retorna o irmão em formato de Elemento, ou seja, um element
                
                Exemplo:
                     const p = document.querySelector('.paragrafo')
                     console.log(p.previousElementSibling) //retorna o elemento anterior, se não tiver retorna null
    


Adicionanado Elementos:
    append:
        serve para apenas colocar um texto avulso sem tags:

            Exemplo:
                 const container = document.querySelector('.container');

                 container.append('Ola, mundo!') // Ola, mundo!
                 container.append('<p>Ola, mundo!</p>') // <p>Ola, mundo!</p>
                
                Isso que ira apracer no html;
    
    appendChild:
        Serve para adicionar tags no html e nessas tags pode se ter textos ou outras coisas;
            Exemplo:
                 const container = document.querySelector('.container');
                 const newDiv = document.createElement('div')
                 newDiv.innerText = 'Ola, mundo!'
                 container.appendChild(newDiv)
                Para fazer com que o appendChild devemos iniciar uma nova váriavel contendo o "document.createElement()" e nesse no elemeneto adicionamos o texto e colocamos o elemeto com o texto dentro do "appendChild()"

    insertBefore:
        É adicionar um lemento antes de outro:

            Exemplo:
                 const container = document.querySelector('.container');
                 const paragrafo = container.querySelector('.paragrafo')
                 const newH2  = document.createElement('h2');
                 newH2.innerText = 'Novo H2';
 
                 container.insertBefore(newH2, paragrafo)
                Estamos criando um novo elemento h2 e inserindo ele antes do elemento com a class "paragrafo";
    
    before e after:
        befor = adiciona um elemeneto/text antes do elemento escolhido:
            váriavel.before(novoElemento);
        
        after = adiciona um elemeneto/text depois do elemento escolhido:
            váriavel.after(novoElemento);
        
        Exemplo:
            1 - Ele está adicionando os Text antes e depois do container
                 const container = document.querySelector('.container');
 
                 container.after('Ola mundo') // Ola mundo
                 container.after('<p>Ola mundo</p>') // <p>Ola mundo</p> 
 
                 container.before('Ola mundo') // Ola mundo
                 container.before('<p>Ola mundo</p>') // <p>Ola mundo</p> 
            
            2 - Ele adiocana mas agora como paragrafo:
                const container = document.querySelector('.container');
 
                const newP = document.createElement('p');
                const newP2 = document.createElement('p');
                newP.innerText = 'Ola mundo'

                container.after(newP)
                container.before(newP2)



Evento:
    Os eventos são manipulados através da propriedade on + nome do evento, ex:
    Tem várias formas de chamar um evento uma das formas é colocar o "onclick" no html;
        
        Exemplo:
            Html:
                 <button onclick="acionarAlert(123)">Acionar Alert</button>
            
            JavaScript:
                 const acionarAlert = (value) => {
                    alert(value);
                 }
            
            No caso se o button for clicado a função será executada, com isso vai abrir um pop up com o valor que foi passado para ela. Não é recomendado usar pois a manutenção ficaria mais dificil;
        
    Manipulador de Evento:
        Nível 0:
            Os manipuladores de entos nível zero são atribuídos diretamente às tags HTML, usando a sintaxe on + nome do evento.
            Adiciona apenas um ouvinte a um elemento, por isso não funciona se eu adicionar mais de um elemento ao mesmo tempo.

            Exemplo:
                 const btn = document.querySelector('button');

                 btn.onclick = function alertOne(){
                     alert(123)
                 }
 
                 btn.onclick = function alertTwo(){
                     alert(456)
                 }

                 // Saida: alert(456)
                
                Podemos abservar que fizemos de uma forma parecida com o exemplo acima mas somente usando o JavaScript "btn.onclick" funciona da mesma forma mas o comando que é executado é sempre o ultimo atribuido;

        Nível 2:
            Os eventos de nível 2 tambem são no JavaScript mas com a utilização de funções arrow e os métodos "addEventListener" e "removeEventListener".

            Comandos:
                click      = Se clicado 
                mouseover  = Se o mouse estiver sobre o elemento
                mouseleave = Se o mouse sair do elemento
                submit     = Quando o button é clicado
                input      = É acionado assim que muda o Input
                change     = É acionado assim que muda de lugar

            Exemplo:
                1 - Se eu clicar no button ele vai fazer os dois comandos ao contrario do "onclick" que manda o ultimo.
                     const btn = document.querySelector('button');

                     btn.addEventListener('click', (event) => {
                         console.log(1)
                     });
 
                     btn.addEventListener('click', (event) => {
                         console.log(2)
                     }); 
                
                2 - Essa forma é mais utilizada e permite que o evento seja executado em qualquer ordem, sem a necessidade de remover um ou outro manipulador de eventos. Se clicado ele vai mudar a cor de fundo do site e se passar o mouse por cima do botão ele ira mudar a cor de fundo para braco novamente;
                     const btn = document.querySelector('button');
                     const body = document.querySelector('body');
 
                     btn.addEventListener('click', (event) => {
                         body.style.backgroundColor = 'red';
                     });
 
                     btn.addEventListener('mouseover', (event) => {
                         body.style.backgroundColor = '#FFF';
                     });
                
                3 - Enquanto o mouse estiver no button o background vai ficar vermelho se retirado ele volta para branco.
                    const btn = document.querySelector('button');
                    const body = document.querySelector('body');

                    btn.addEventListener('click', (event) => {
                        body.style.backgroundColor = 'red';
                    });

                    btn.addEventListener('mouseleave', (event) => {
                        body.style.backgroundColor = '#FFF';
                    });
    
    Removendo eventos:
        Tem como remover eventos de Nível 2, usando a função removeEventListener() e passando os mesmos parâmetros que foram utilizados no addEventListener();

        Exemplo:
            1 - Ele está adicionanado um Event Listener e logo em seguida ele é removido.
                 const btn = document.querySelector('button');
 
                 const acioarAlert = () => {
                     alert(123)
                 }
  
                 btn.addEventListener('click', acioarAlert)
                 btn.removeEventListener('click', acioarAlert)

            2 - É uma forma de passar o alert só uma vez.
                 const btn = document.querySelector('button');
 
                 const acioarAlert = () => {
                     let validador = false
                     alert(123)
                     validador = true
                     if (validador){
                         btn.removeEventListener('click', acioarAlert)
                     }
                 }
 
                 btn.addEventListener('click', acioarAlert)

    Previnindo que eventos sejam feitos:
        Serve para prvinir que um efeito em html seja executado usando o comando .preventDefault():

            Exemplo:
                html:
                     <a href="https://vidafulllstack.com.br" target="_blank">
                         Acessar o site Vidafulllstack
                     </a>

                JavaScript:
                     const link = document.querySelector('a')
 
                     link.addEventListener('click', (event) =>{
                         event.preventDefault();
                     })

                O evento que aconteceria era de abrir a página, mas com o preventDefault(), ele previne isso e não abre ela;
    
    Delegando um evendo:
        Básicamente é adicionar um ou mais elementos a um pai, e quando algum dos filhos for clicados ele vai procurar no pai por um determinado elemento filho.
        Então é em vez de adicionar um evendo para cada filho adicionamos um evendo no pai, e dentro do callback verificamos qual elemento foi clicado assim fazendo alguma função.

        Exemplo:
            HTMl:
                 <ul class="menu">
                     <li class="home">Home</li>
                     <li class="sobre">Sobre</li>
                     <li class="contato">Contato</li>
                 </ul>
        
            JavaScript:
                 const menu = document.querySelector('.menu')
 
                 menu.addEventListener('click', (event) => {
                     const { target } = event;
                     
                    switch (target.getAttribute('class')) {
                         case 'home':
                             console.log('clicado em home')
                             break;
                        
                         case 'sobre':
                             console.log('clicado em sobre')
                            break;
                     
                         case 'contato':
                             console.log('clicado em contato')
                             break;
                     
                         default:
                             break;
                     }
                 })
            
            Ele está pegando o ul que tem a class menu, adicionando um evendo caso clicado e verificando qual elemeneto foi clicado, e dependendo do elemento ele vai fazer algo;
    
    Validando eventos:
        Se por algum acasso não existir um id, class, etc no seu código ele não vai fazer alquele evento

        Exemplo:
            1 - Existem duas formas de validar isso com if:
                 const menu = document.querySelector('.menu')
                 if (menu){
                     menu.addEventListener('click', (event) => {
                         const { target } = event;
                         
                         switch (target.getAttribute('class')) {
                             case 'home':
                                 console.log('clicado em home')
                                 break;
                             
                             case 'sobre':
                                 console.log('clicado em sobre')
                                 break;
                         
                             case 'contato':
                                 console.log('clicado em contato')
                                 break;
                         
                             default:
                                 break;
                         }
                     })
                 }
            
            2 - usando "?":
                const menu = document.querySelector('.menu')

                menu?.addEventListener('click', (event) => {
                    const { target } = event;
                    
                    switch (target.getAttribute('class')) {
                        case 'home':
                            console.log('clicado em home')
                            break;
                        
                        case 'sobre':
                            console.log('clicado em sobre')
                            break;
                    
                        case 'contato':
                            console.log('clicado em contato')
                            break;
                    
                        default:
                            break;
                    }
                })
            
            Ambos tem a mesma funcionalidade.



Formulários:
    Acessando:
        Html:
             <form action="..." method="get" id="registration">
             <label>
                 Name:
                 <input type="text" name="name">
             </label>
             <br />
             <label>
                 Senha:
                 <input type="password" name="password">
             </label>
             <br />
             <button>Registration</button>
             </form>

        Para acessar um formulario se faz de uma maneira diferente:
             const form = document.forms.namedItem('registration');
        No caso estamos em vez de chamar o "querySelector" uzamos o "forms.namedItem" com o id do item no parentesis.
        
        Mas para acessar elemenetos e dar um comando para esse formulario:
             form.addEventListener('submit', (event) => {
                 event.preventDefault();
  
                 const name = form.name.value;
                 const password = form.password.value;
 
                 console.log(name, password)
             })
        O evento é chamado quando apertamos o botão. E para acessar colocamos a atribuição que está dentro da tag 'name' do html e usamos o value pois é um input;

    FormData:
        É uma interface fornecida pelo JavaScript que permite a criação e manipulação de objetos que representam dados de formulários HTML.

        HTML:
             <form action="..." method="get" id="registration">
                 <label>
                     Name:
                     <input type="text" name="name">
                 </label>
                 <br />
                 <label>
                     Senha:
                     <input type="password" name="password">
                 </label>
                 <br />
                 <button>Registration</button>
             </form>

        JavaScript:
             const form = document.forms.namedItem('registration');
             form.addEventListener('submit', (event) => {
                 event.preventDefault();
  
                 const name = form.name.value;
                 const password = form.password.value;
 
                 console.log(name, password)
             })
        
        
        Para inicar um FormData utilizamos:
             const nome Váriavel = new FormData(sua ConstForm);
            Esse comando é para colocalo em uma váriavel e assim fazer seus comandos o suaConstForm seria a const que seria referencia np código ficaria:
                 const formData = new FormData(form);
        
        
        Para pegar um valor especifico tipo o "name" ou a "password" utilzamos:
             formData.get('Dentro do name do html')
            Ele passa o valor digitado dentro do input e no nosso código ficaria assim:
                 console.log(formData.get('name'))
                 console.log(formData.get('password'))
        

        Tambem tem como de em vez de colocar os todos os dados de uma vez podemos usar:

             formData.set('nome qualquer', váriavel atribuida a um input dentro do form);

            No caso ele vai ganhar uma nova "váriavel" que tera o valor passado em outra exemplo:
                 const name = form.name.value; // pega o valor de name
                 const password = form.password.value; // pega o valor de password
    
                 formData.set('name', name) // seta qual a chave para a váriavel name
                 formData.set('password', password) // seta qual a chave para a váriavel password
        

        Para validar se o formData tem uma chave especifica utilzamos:
             formData.has(nome da chave); // true ou false
            No código ficaria:
                 if (formData.has('name') || formData.has('password')){
                     console.log(formData.get('name'))
                     console.log(formData.get('password'))
                 }
        

        E para deletar um chave com sua váriavel usamos:
             formData.delete(Nome da chave)
            No código ficaria:
                 formData.delete('name')
                 console.log(formData.has('name')) // false


    Manipulando Radio Button:
        Para maniplar um radio button precisamos entender algumas coisas:
             radio.forEach((res) => {
                if (res.checked){
                     console.log(res)
                 }
             })
            Tem como verificar que ele stá celecionado usando o ".checked".
        HTML:
             <form action="..." method="get" id="select-radio">
                <label>
                     HTML
                     <input type="radio" name="radio" value="HTML5">
                 </label>
                 <br>
                <label>
                     CSS3
                     <input type="radio" name="radio" value="CSS3">
                 </label>
                 <br>
                 <label>
                      JavaScript
                    <input type="radio" name="radio" value="JavaScript">
                 </label>
                 <br>
                 <br>
                 <button>Select your favorite!</button>
             </form>
             <div id="submit"></div>
             <div id="change"></div>
            
        JavaScript:
            const form = document.forms.namedItem('select-radio');
             const submit = document.querySelector('#submit')
             const change = document.querySelector('#change')
 
 
             form.addEventListener('submit', (event) =>{
                 event.preventDefault();
                 const radio = form.radio;
                 submit.innerHTML = radio.value
             })

             form.radio.forEach((res) => {
              res.addEventListener("change", (event) => {
                    const { target } = event;
 
                     if (target.checked) {
                     change.innerHTML = target.value;
                     }
                 });
             });
    
        1° form.addEventListener:
            estamos esperdando o usuário marcar alguma caixa e clicar em submit para assim colocar/mudar o innerHTML da div#submit;
        
        2° form.radio.forEach:
            Estamos esperando o usuário selecionar algum botão e quando selecionado ele coloca/muda o innerHTML da div#change;
        
    Manipulando Checkbox:
        HTML:
            <form action="..." method="get" id="select-checkbox">
             <label>
                 HTML
                 <input type="checkbox" name="checkbox" value="HTML5">
             </label>
             <br>
            <label>
                 CSS3
                  <input type="checkbox" name="checkbox" value="CSS3">
            </label>
              <br>
            <label>
                 JavaScript
                 <input type="checkbox" name="checkbox" value="JavaScript">
             </label>
             <br>
             <br>
             <button>Select your favorite!</button>
         </form>
         <div id="submit"></div>
         <div id="change"></div>
        

        JavaScript:
             const form = document.forms.namedItem('select-checkbox');
             const submit = document.querySelector('#submit')
             const change = document.querySelector('#change')
 
 
             let checkedValues = [];
 
             form.addEventListener('submit', (event)=>{
                 event.preventDefault();
                 submit.innerHTML = checkedValues;
             }) 
 
             form.checkbox.forEach((element) => {
                 element.addEventListener('change', (event)=>{
                     hasChecked(event, element);
                     change.innerHTML = checkedValues;
                 })
              });
 
             const hasChecked = (event,element) => {
                const { target } = event;
 
                 if (target.checked){
                     return checkedValues.push(element.value);
                 }
 
                 if (!target.checked){
                     return checkedValues.map((checkvalue, index) =>{
                         if (element.value == checkvalue) {
                             return checkedValues.splice(index, 1);
                         }
                     })
                 }
 
             }
        
        1° form.addEventListener:
            Se o usuário clicar em subimit vai mostrar os campos selecionados por ele;
        
        2° form.checkbox.forEach:
            Para cada checkbox clicado vai somar no elemenet e a função addEventListener está no modo change então a cada elemento selecionado ele vai sofrer uma mudança;
        
        3° hasChecked
            Ele ta verificando se o checkbox está seleciona se tiver o valor dela vai ser adicionada na array checkedValues e se estiver/for dechecado ele vai remover da array verificando se ele está dentro dela;
        
        